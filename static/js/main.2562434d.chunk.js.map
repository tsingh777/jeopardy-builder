{"version":3,"sources":["components/tile.tsx","components/question.tsx","components/gameboard.tsx","pages/WelcomPage.tsx","components/uploader.tsx","App.tsx","index.tsx"],"names":["TileContainer","styled","div","JeopardyBoardTile","question","onClick","React","useState","questionSelected","setQuestionSelected","value","Container","QuestionCard","answerShown","setShown","a","q","PageLayout","Board","Column","Header","GameBoard","columns","showQuestion","setshowQuestion","undefined","currentQuestion","setCurrentQuestion","selectQuestion","selection","className","map","item","index","key","questions","tile","Layout","WelcomePage","to","GameUploader","data","setData","onReaderLoad","event","target","result","JSON","parse","length","type","accept","onChange","reader","FileReader","onload","readAsText","files","App","Fragment","path","SuperHeroData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2562434d.chunk.js","sourcesContent":["import React from 'react';\nimport { Question } from '../App';\nimport styled from 'styled-components';\n\nconst TileContainer = styled.div`\n    padding: 12px;\n    \n    color: #ddd;\n    background: linear-gradient(to top left, #000088, #0000ff);\n    \n    border-color: #ddd;\n    border: solid 1px;\n    border-radius: 10px;\n    \n    display:flex;\n    justify-content: center;\n    align-items: center;\n    height: 16%;\n    overflow: hidden;\n    min-height: 20px;\n`;\n\n\nexport const JeopardyBoardTile: React.FC<{ question: Question, onClick(selection: Question): void }> = ({ question, onClick }) => {\n    const [questionSelected, setQuestionSelected] = React.useState<boolean>(false);\n    const selectQuestion = () => {\n        setQuestionSelected(true);\n        onClick(question);\n    };\n\n    return (\n        <TileContainer onClick={selectQuestion}>\n            {questionSelected ? '' : question.value}\n        </TileContainer>\n    );\n}\n\n","import React from 'react';\nimport { Question } from '../App';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    padding: 12px;\n    \n    color: #ddd;\n    background: linear-gradient(to top left, #000088, #0000ff);\n    \n    border-color: #ddd;\n    border: solid 1px;\n    border-radius: 10px;\n    \n    position:absolute;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    overflow: hidden;\n    height: 50vh;\n    width: 50vw;\n`;\n\n\nexport const QuestionCard: React.FC<{ question?: Question, onClick(): void }> = ({ question, onClick }) => {\n    const [answerShown, setShown] = React.useState<boolean>(false);\n    const showAnswer = () => {\n        setShown(true);\n    };\n    const dismiss = () => {\n        setShown(false);\n        onClick();\n    };\n    return (question ?\n        <Container onClick={answerShown ? dismiss : showAnswer}>\n            {answerShown ? question.a : question.q}\n        </Container> : null\n    );\n}\n\n","import React from 'react';\nimport { Categories, Question } from '../App';\nimport styled from 'styled-components';\nimport { JeopardyBoardTile } from './tile';\nimport { QuestionCard } from './question';\n\nconst PageLayout = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n`;\nconst Board = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-evenly;\n    margin: 100px;\n`;\nconst Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    flex: 1;\n`;\nconst Header = styled.div`\n    text-transform: uppercase;\n    text-align: center;\n    margin-top: 8px;\n    height: 80px;\n`;\n\nexport const GameBoard: React.FC<{ columns: Array<Categories> }> = ({ columns }) => {\n    const [showQuestion, setshowQuestion] = React.useState<boolean>(true);\n    const [currentQuestion, setCurrentQuestion] = React.useState<Question | undefined>(undefined);\n    const hideQuestion = () => {\n        setshowQuestion(false);\n        setCurrentQuestion(undefined);\n    };\n    const selectQuestion = (selection: Question) => {\n        setshowQuestion(true);\n        setCurrentQuestion(selection);\n    };\n\n    const buildBuild = () => {\n        return columns.map((item: Categories, index) => {\n            return (\n                <Column key={`${item.key}-${index}-col`}>\n                    <Header>{item.key}</Header>\n                    {item.questions.map((tile: Question, index) => {\n                        return (\n                            <JeopardyBoardTile\n                                key={`${item.key}-${tile.q}-${tile.a}-${index}`}\n                                question={{ ...tile, value: tile.value ? tile.value : ((index + 1) * 100) }}\n                                onClick={selectQuestion}\n                            />\n                        );\n                    })}\n                </Column>\n            );\n        });\n    };\n    return (\n        <PageLayout>\n            <Board className=\"board\">\n                {buildBuild()}\n                {showQuestion && <QuestionCard onClick={hideQuestion} question={currentQuestion} />}\n            </Board>\n        </PageLayout>\n    );\n}\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n    Link,\n} from \"react-router-dom\";\n\nconst Layout = styled.div`\n    padding: 25px;\n`;\n\nexport const WelcomePage: React.FC = () => {\n    return (\n        <Layout>\n            <h1>Welcome to my trivia maker</h1>\n            <p>Play <Link to=\"/heros\">superheros</Link></p>\n            <Link to=\"/custom\">Upload</Link>\n        </Layout>\n    );\n}\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { GameBoard } from './gameboard';\nimport { Categories } from '../App';\n\nconst Layout = styled.div`\n    padding: 25px;\n`;\n\nexport const GameUploader: React.FC = () => {\n    const [data, setData] = React.useState<Array<Categories>>([]);\n\n    const onReaderLoad = (event) => {\n        if (event && event.target && event.target.result) {\n            setData(JSON.parse(event.target.result));\n        }\n    };\n    const handleInput = (event) => {\n        const reader = new FileReader();\n        reader.onload = onReaderLoad;\n        reader.readAsText(event.target.files[0]);\n    };\n    const noData = !data || (data && data.length === 0);\n\n    if (!noData) {\n        return (\n            <GameBoard columns={data} />\n        );\n    }\n\n    return (\n        <Layout>\n            <h1>Welcome to my trivia maker</h1>\n            <input type=\"file\" accept=\".json\" onChange={handleInput} />\n        </Layout>\n    );\n}\n\n","import React from 'react';\nimport './App.css';\nimport { GameBoard } from './components/gameboard';\nimport styled from 'styled-components';\nimport SuperHeroData from './games/superHeros1.json';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { WelcomePage } from './pages/WelcomPage';\nimport { GameUploader } from './components/uploader';\n\nexport interface Question {\n  q: String\n  a: String\n  value?: Number\n}\nexport interface Categories {\n  key: String\n  questions: Array<Question>\n}\n\n\nexport const App = () => {\n  return (\n    <React.Fragment>\n      <Router>\n        <Switch>\n          <Route path=\"/heros\">\n            <GameBoard columns={SuperHeroData} />\n          </Route>\n          <Route path=\"/custom\">\n            <GameUploader />\n          </Route>\n          <Route path=\"/\">\n            <WelcomePage />\n          </Route>\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}